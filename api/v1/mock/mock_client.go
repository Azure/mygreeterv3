// Code generated by MockGen. DO NOT EDIT.
// Source: go.goms.io/aks/rp/mygreeterv3/api/v1 (interfaces: MyGreeterClient)
//
// Generated by this command:
//
//	mockgen -package mock go.goms.io/aks/rp/mygreeterv3/api/v1 MyGreeterClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "go.goms.io/aks/rp/mygreeterv3/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMyGreeterClient is a mock of MyGreeterClient interface.
type MockMyGreeterClient struct {
	ctrl     *gomock.Controller
	recorder *MockMyGreeterClientMockRecorder
}

// MockMyGreeterClientMockRecorder is the mock recorder for MockMyGreeterClient.
type MockMyGreeterClientMockRecorder struct {
	mock *MockMyGreeterClient
}

// NewMockMyGreeterClient creates a new mock instance.
func NewMockMyGreeterClient(ctrl *gomock.Controller) *MockMyGreeterClient {
	mock := &MockMyGreeterClient{ctrl: ctrl}
	mock.recorder = &MockMyGreeterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyGreeterClient) EXPECT() *MockMyGreeterClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockMyGreeterClient) SayHello(arg0 context.Context, arg1 *v1.HelloRequest, arg2 ...grpc.CallOption) (*v1.HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*v1.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockMyGreeterClientMockRecorder) SayHello(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockMyGreeterClient)(nil).SayHello), varargs...)
}
